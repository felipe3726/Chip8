/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Chip8;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

//import org.graalvm.compiler.nodes.NodeView.Default;
//public Dissasembler d = new Dissasembler();


public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    private static short pc = 512;
    
    public static String pcAddr(){

        return String.format("%04X: ", pc);
    }

    public static void loadFile(String path, byte[] mem) throws FileNotFoundException, IOException{
        BufferedReader br = new BufferedReader(new FileReader(path));

           
             int current;
             int c = 0;
             while ((current = br.read())>=0){
              mem[c++] = (byte)(current & 0xFF); //Quitar signos m√°scara 0xFF
             }

          for(int i = 0; i<mem.length; i = i+2, pc = (short)(pc+2)){
                switch((mem[i]>>>4)& 0x0F){
                      case (byte)0x0:
                      switch(mem[i+1]){
                          case (byte)0xE0:
                          System.out.println( pcAddr() + new Dissasembler().cls());
                          break;
                          case(byte)0xEE:
                          System.out.println( pcAddr() + new Dissasembler().ret());
                          
                          break;

                          default:
                          break;
                 
                      }
                      break;
                          case (byte)0x1:
                          System.out.println( pcAddr() + new Dissasembler().jmp((byte)mem[i], (byte)mem[i+1]));
                          
                          break;

                          case (byte)0x2:
                          System.out.println(pcAddr() + new Dissasembler().call((byte)mem[i], (byte)mem[i+1]));
                          
                          break;

                          case (byte)0X3:
                          System.out.println(pcAddr() + new Dissasembler().se((byte)mem[i], (byte)mem[i+1]));
                          
                          break;

                          case (byte)0x4:
                          System.out.println(pcAddr() + new Dissasembler().sne((byte)mem[i], (byte)mem[i+1])); 
                          
                          break;

                          case (byte)0x5:
                          System.out.println(pcAddr() + new Dissasembler().se1((byte)mem[i], (byte)mem[i+1]));
                          
                          break;

                          case (byte)0x6:
                          System.out.println(pcAddr() + new Dissasembler().ld((byte)mem[i], (byte)mem[i+1]));
                          
                          break;

                          case (byte)0x7:
                          System.out.println(pcAddr() + new Dissasembler().add((byte)mem[i], (byte)mem[i+1]));
                          
                          break;

                          case (byte)0x8:
                                  switch(mem[i+1] & 0x0F){
                                      case (byte)0x0:
                                      System.out.println(pcAddr() + new Dissasembler().ld1((byte)mem[i], (byte)mem[i+1]));
                                      
                                      break;

                                      case (byte)0x1:
                                      System.out.println(pcAddr() + new Dissasembler().or((byte)mem[i], (byte)mem[i+1]));
                                      
                                      break;

                                      case (byte)0x2:
                                      System.out.println(pcAddr() + new Dissasembler().and((byte)mem[i], (byte)mem[i+1]));
                                      
                                      break;
                                      
                                      case (byte)0x3:
                                      System.out.println(pcAddr() + new Dissasembler().xor((byte)mem[i], (byte)mem[i+1]));
                                      
                                      break;

                                      case (byte)0x4:
                                      System.out.println(pcAddr() +new Dissasembler().add1((byte)mem[i], (byte)mem[i+1]));
                                      
                                      break;

                                      case (byte)0x5:
                                      System.out.println(pcAddr() +new Dissasembler().sub((byte)mem[i], (byte)mem[i+1]));
                                      
                                      break;

                                      case (byte)0x6:
                                      System.out.println(pcAddr() +new Dissasembler().shr((byte)mem[i], (byte)mem[i+1]));
                                      
                                      break;

                                      case (byte)0x7:
                                      System.out.println(pcAddr() +new Dissasembler().subn((byte)mem[i], (byte)mem[i+1]));
                                      
                                      break;

                                       case (byte)0xE:
                                       System.out.println(pcAddr() +new Dissasembler().shl((byte)mem[i], (byte)mem[i+1]));
                                      
                                       break;

                                       default:
                                     
                                       break;
                 }
                 break;
                          case (byte)0x9:
                          System.out.println(pcAddr() +new Dissasembler().sne2((byte)mem[i], (byte)mem[i+1]));
                          
                          break;

                          case (byte)0xA:
                          System.out.println(pcAddr() +new Dissasembler().ld2((byte)mem[i], (byte)mem[i+1]));
                          
                          break;

                          case (byte)0xB:
                          System.out.println(pcAddr() +new Dissasembler().jp((byte)mem[i], (byte)mem[i+1]));
                          
                          break;

                          case (byte)0xC:
                          System.out.println(pcAddr() +new Dissasembler().rnd((byte)mem[i], (byte)mem[i+1]));
                          
                          break;

                          case (byte)0xD:
                          System.out.println(pcAddr() +new Dissasembler().drw((byte)mem[i], (byte)mem[i+1]));
                          
                          break;

                          case (byte)0xE:
                              switch(mem[i+1]){
                                  case (byte)0x9E: 
                                  System.out.println(pcAddr() +new Dissasembler().skp((byte)mem[i], (byte)mem[i+1]));
                                
                                  break;
                                  
                                  case (byte)0xA1:
                                  System.out.println(pcAddr() +new Dissasembler().sknp((byte)mem[i], (byte)mem[i+1]));
                               
                                  break;

                                  default:
                                  break;
                 }        
                 break;
                          case (byte)0xF: //0xF
                              switch(mem[i+1]){
                               case (byte)0x07:
                               System.out.println(pcAddr() +new Dissasembler().ld3((byte)mem[i], (byte)mem[i+1]));
                               
                               break;
                                  
                               case (byte)0x0A:
                               System.out.println(pcAddr() +new Dissasembler().ld4((byte)mem[i], (byte)mem[i+1]));
                               
                               break;

                               case (byte)0x15:
                               System.out.println(pcAddr() +new Dissasembler().ld5((byte)mem[i], (byte)mem[i+1]));
                               
                               break;

                               case (byte)0x18:
                               System.out.println(pcAddr() +new Dissasembler().ld6((byte)mem[i], (byte)mem[i+1]));
                               
                               break;

                               case (byte)0x1E:
                               System.out.println(pcAddr() +new Dissasembler().add2((byte)mem[i], (byte)mem[i+1]));
                               
                               break;

                               case (byte)0x29:
                               System.out.println(pcAddr() +new Dissasembler().ld7((byte)mem[i], (byte)mem[i+1]));
                               
                               break;

                               case (byte)0x33: 
                               System.out.println(pcAddr() +new Dissasembler().ld8((byte)mem[i], (byte)mem[i+1]));
                               
                               break;

                               case (byte)0x55:
                               System.out.println(pcAddr() +new Dissasembler().ld9((byte)mem[i], (byte)mem[i+1]));
                               
                               break;

                               case (byte)0x65:
                               System.out.println(pcAddr() +new Dissasembler().ld10((byte)mem[i], (byte)mem[i+1]));
                               
                               break;

                               default:
                               break;
                 }        
                 break;
                 default:
                 break; 
                }
              
            }
             br.close();
    } 

    public static void main(String[] args) {
       
       try {

        var ans = new byte[4096];
        loadFile("ufo.rom", ans);
        
           } catch (Exception e) {
            System.out.println("LOL");
           }

           
    }
}
